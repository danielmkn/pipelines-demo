resources:
  - name: helmGitHub1
    type: GitRepo
    configuration:
      gitProvider: GitHubIntegrationMD
      # replace with your pipelines repository
      path: danielmkn/pipelines-demo # if path is modified, change the name as well, per Pipelines doc
      branches:
        include: main
      buildOn:
        commit: true

  - name: simpleDockerImage1
    type: Image
    configuration:
      registry: simplehelmDockerIntegration
      sourceRepository: art-docker-dynatrace
      imageName: dynatracejtpp.jfrog.io/art-docker-dynatrace/busybox
      imageTag: ${run_number}

  - name: simpleBuildInfo1
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration
      buildName: SampleApp
      buildNumber: ${run_number}

  - name: simpleHelmChartBuildInfo1
    type: BuildInfo
    configuration:
      sourceArtifactory: artifactoryIntegration
      buildName: SampleApp
      buildNumber: 0.0.0

  - name: simplehelmRepoChart1
    type: GitRepo
    configuration:
      gitProvider: GitHubIntegrationMD
      path: danielmkn/pipelines-demo # replace with your repo
      branches:
        include: main
      buildOn:
        commit: true

  - name: simplehelmChart2
    type: HelmChart
    configuration:
      sourceArtifactory: artifactoryIntegration
      repository: simplecharts
      chart: busybox
      version: 0.0.0

pipelines:
  - name: dynatrace_demo_helm
    configuration:
      environmentVariables:
        readOnly:
          my_releaseName: "busybox${run_number}"
    steps:
      - name: build_image
        type: DockerBuild
        configuration:
          affinityGroup: buildAndPush
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: helmGitHub1
          dockerFileLocation: pipeline/dynatrace/
          dockerFileName: Dockerfile
          dockerImageName: dynatracejtpp.jfrog.io/art-docker-dynatrace/busybox
          dockerImageTag: $run_number

      - name: push_image
        type: DockerPush
        configuration:
          affinityGroup: buildAndPush
          autoPublishBuildInfo: true
          integrations:
            - name: artifactoryIntegration
          targetRepository: art-docker-dynatrace
          inputSteps:
            - name: build_image
          outputResources:
            - name: simpleBuildInfo1
            - name: simpleDockerImage1

      - name: helm_build
        type: HelmPublish
        configuration:
          helmVersion: 3
          chartPath: pipeline/dynatrace/busybox/
          affinityGroup: helm_install
          inputSteps:
            - name: push_image
          inputResources:
            - name: simplehelmRepoChart1
              trigger: false
          outputResources:
            - name: simplehelmChart2
            - name: simpleHelmChartBuildInfo1
        execution:
          onStart:
            - echo "Start"
            - printenv

      # Install Dynatrace agent on the cluster. Use the separate namespace
      - name: install_oneAgent_operator
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: k8sIntegrationMD
            - name: dynatraceIntegration
          inputSteps:
            - name: helm_build
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - echo "Installing and configuring OneAgent"
            - kubectl config current-context
            #- kubectl create namespace dynatrace
            #- kubectl apply -f https://github.com/Dynatrace/dynatrace-oneagent-operator/releases/latest/download/kubernetes.yaml
            #- kubectl -n dynatrace logs deployment/dynatrace-oneagent-operator
            #- kubectl -n dynatrace create secret generic oneagent --from-literal="apiToken=${int_dynatraceIntegration_API_TOKEN}" --from-literal="paasToken=${int_dynatraceIntegration_PAAS_TOKEN}"
            - curl -o cr.yaml https://raw.githubusercontent.com/Dynatrace/dynatrace-oneagent-operator/master/deploy/cr.yaml
            ## configure cr.yaml file when we have all the data needed
            #- kubectl apply -f cr.yaml
          onSuccess:
            - echo "Dynatrace OneAgent has beed successfully installed"
          onFailure:
            - echo "Failure"

      - name: deploy_helm
        type: HelmDeploy
        configuration:
          helmVersion: 3
          affinityGroup: helm_install
          releaseName: busybox${run_number}
          integrations:
            - name: k8sIntegrationMD
            - name: artifactoryIntegration
          inputResources:
            - name: simplehelmChart2
            - name: simpleDockerImage1
          inputSteps:
            - name: install_oneAgent_operator
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - COUNT="$(kubectl get secret regcred | wc -l)"
            - >-
              if [[ "${COUNT}" =~ 0 ]];
              then
                echo "Creating regcred secret";
                kubectl create secret docker-registry regcred --docker-server=dynatracejtpp.jfrog.io --docker-username=${int_artifactoryIntegration_user} --docker-password=${int_artifactoryIntegration_apikey};
              else
                echo "Secret found, deleting and creating a new one";
                kubectl delete secret regcred;
                kubectl create secret docker-registry regcred --docker-server=dynatracejtpp.jfrog.io --docker-username=${int_artifactoryIntegration_user} --docker-password=${int_artifactoryIntegration_apikey};
              fi
            - kubectl config current-context
            - add_run_variables CLUSTER="$(kubectl config current-context)"
            - add_run_variables RELEASE_NAME="${my_releaseName}"
            - printenv
          onSuccess:
            - kubectl get pods
          onFailure:
            - echo "Failure"

      - name: modify_properties
        type: Bash
        configuration:
          affinityGroup: helm_install
          integrations:
            - name: artifactoryIntegration
          inputResources:
            - name: simplehelmChart2
          inputSteps:
            - name: deploy_helm
        execution:
          onStart:
            - echo "Preparing for work..."
          onExecute:
            - printenv
            - echo "Modifying helm chart properties"
            - echo "Set current time as a deployment time"
            - TIME=$(date +%s)
            - curl --location --request PUT "${int_artifactoryIntegration_url}/api/storage/simplecharts/busybox-${res_simplehelmChart2_version}.tgz?properties=deployedOnCluster=${CLUSTER}%7ChelmInstallationName=${RELEASE_NAME}%7CdeploymentTimestamp=${TIME}" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}"
          onSuccess:
            - echo "Check the artifact parameters"
            - curl --location --request GET "${int_artifactoryIntegration_url}/api/storage/simplecharts/busybox-${res_simplehelmChart2_version}.tgz?properties=helmInstallationName,chart.version,deployedOnCluster" --header "Accept:application/json" --header "X-Jfrog-Art-Api:${int_artifactoryIntegration_apikey}"
          onFailure:
            - echo "Failure"